-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Variables
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local camlockEnabled = false -- toggle state
local lockedTarget = nil -- current locked target
local maxRange = 50 -- maximum range for tracking target (in studs)
local smoothness = 0.9 -- smoothing factor for camera movement (lower = smoother)
local trackingUpdateRate = 0.01 -- time (in seconds) between target updates (lower = smoother)
local lastUpdateTime = 0 -- track the last time the target was updated
local forceThreshold = 0.3 -- threshold of mouse movement speed to break the camera lock
local targetList = {} -- List to store potential targets
local currentTargetIndex = 1 -- Index of current target in the list

-- Camlock Recovery Variables
local camlockBrokenTime = 0
local camlockRecoveryDelay = 1 -- Delay before camlock can be re-enabled

-- UI for Toggle State
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CamlockStatusUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

local statusText = Instance.new("TextLabel")
statusText.Size = UDim2.new(0.3, 0, 0.05, 0)
statusText.Position = UDim2.new(0.35, 0, 0.1, 0) 
statusText.BackgroundTransparency = 1
statusText.TextSize = 24
statusText.TextColor3 = Color3.fromRGB(255, 255, 255)
statusText.TextStrokeTransparency = 0
statusText.Text = "Camlock: OFF"
statusText.Parent = screenGui

local function resetCamlock()
    camlockEnabled = false
    lockedTarget = nil
    targetList = {}
    currentTargetIndex = 1
    camlockBrokenTime = tick()
    statusText.Text = "Camlock: Broken by Force"
end

local function toggleCamlock()
    -- Check if enough time has passed since being broken
    if tick() - camlockBrokenTime < camlockRecoveryDelay then
        statusText.Text = "Camlock: Cooling Down"
        return
    end

    camlockEnabled = not camlockEnabled
    if camlockEnabled then
        updateTargetList()
        statusText.Text = "Camlock: ON"
    else
        resetCamlock()
        statusText.Text = "Camlock: OFF"
    end
end

local function updateTargetList()
    targetList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance <= maxRange then
                table.insert(targetList, player)
            end
        end
    end
    table.sort(targetList, function(a, b) 
        local distA = (localPlayer.Character.HumanoidRootPart.Position - a.Character.HumanoidRootPart.Position).Magnitude
        local distB = (localPlayer.Character.HumanoidRootPart.Position - b.Character.HumanoidRootPart.Position).Magnitude
        return distA < distB
    end)
end

local function switchTarget()
    if #targetList > 0 then
        currentTargetIndex = currentTargetIndex % #targetList + 1
        lockedTarget = targetList[currentTargetIndex]
        statusText.Text = "Camlock: Target Switched to " .. lockedTarget.Name
    else
        statusText.Text = "Camlock: No Targets Available"
        lockedTarget = nil
    end
end

-- First-Person and Third-Person Mouse Movement Detection
local function detectMouseMovement()
    local mouseMovement = 0
    
    local success, deltaX, deltaY = pcall(function()
        local delta = UserInputService:GetMouseDelta()
        return math.abs(delta.X), math.abs(delta.Y)
    end)
    
    if success then
        mouseMovement = math.sqrt(deltaX^2 + deltaY^2)
    end
    
    return mouseMovement
end

-- Enhanced Mouse Force Breaking and Recovery Mechanism
local mouseMovementHistory = {}
local historySampleSize = 5 -- Number of previous mouse movements to track

RunService.Heartbeat:Connect(function()
    -- Recovery mechanism
    if not camlockEnabled and tick() - camlockBrokenTime >= camlockRecoveryDelay then
        statusText.Text = "Camlock: Ready"
    end

    if camlockEnabled and lockedTarget then
        local mouseMovement = detectMouseMovement()

        -- Store mouse movement in history
        table.insert(mouseMovementHistory, mouseMovement)
        if #mouseMovementHistory > historySampleSize then
            table.remove(mouseMovementHistory, 1)
        end

        -- Calculate average mouse movement
        local averageMovement = 0
        for _, movement in ipairs(mouseMovementHistory) do
            averageMovement = averageMovement + movement
        end
        averageMovement = averageMovement / #mouseMovementHistory

        -- Check if mouse movement exceeds force threshold more consistently
        if averageMovement > forceThreshold * 100 then
            resetCamlock()
        end
    end
end)

-- Keybinds 
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if isProcessed then return end
    if input.KeyCode == Enum.KeyCode.Y then -- Toggle Camlock
        toggleCamlock()
    elseif input.KeyCode == Enum.KeyCode.T and camlockEnabled then -- Switch Target
        switchTarget()
    end
end)

-- Camlock Tracking and Rendering
RunService.RenderStepped:Connect(function()
    if camlockEnabled and lockedTarget and lockedTarget.Character and lockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        if lockedTarget.Character:FindFirstChild("Humanoid").Health <= 0 then
            resetCamlock()
            statusText.Text = "Camlock: Target Lost"
            return
        end

        local cameraPosition = camera.CFrame.Position
        local targetPosition = lockedTarget.Character.HumanoidRootPart.Position

        camera.CFrame = camera.CFrame:Lerp(CFrame.new(cameraPosition, targetPosition), smoothness)
    end
end)

-- Target Tracking
RunService.Heartbeat:Connect(function()
    if camlockEnabled then
        if tick() - lastUpdateTime >= trackingUpdateRate then
            if not lockedTarget or lockedTarget.Character.Humanoid.Health <= 0 then
                updateTargetList()
                if #targetList > 0 then
                    lockedTarget = targetList[1]
                    currentTargetIndex = 1
                    statusText.Text = "Camlock: New Target " .. lockedTarget.Name
                else
                    resetCamlock()
                end
            end
            lastUpdateTime = tick()
        end
    end
end)
